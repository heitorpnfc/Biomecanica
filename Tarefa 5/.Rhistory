"atrioventricular block", "hyperkalemia", "hypokalemia",
"hypercalcemia", "hypocalcemia"),
Kb = c(10, 0, 117, 61, 121, 121, 117, 124),
Ap = c(0.070, 0.000, 0.090, 0.106, 0.070, 0.070, 0.100, -0.040),
Kp = c(93, 23, 79, 91, 73, 69, 79, 75),
Kpq = c(0, 0, 0, 48, 6, 13, 5, 0),
Aq = c(0.135, 0.325, 0.065, 0.040, 0.040, 0.020, 0.030, 0.000),
Kq = c(85, 140, 25, 21, 21, 22, 20, 15),
Ar = c(1.15, 1.09, 1.52, 1.55, 1.17, 1.00, 1.55, 1.37),
Kr = c(84, 133, 23, 23, 23, 15, 22, 36),
As = c(0.35, 0.28, 0.16, 0.13, 0.11, 0.75, 0.60, 0.16),
Ks = c(114, 182, 15, 15, 15, 26, 14, 54),
Kcs = c(61, 100, 5, 2, 4, -3, 5, 27),
sm = c(61, 119, 96, 17, 26, 35, 6, 87),
Kst = c(52, 57, 101, 52, 56, 64, 6, 42),
At = c(0.130, 0.000, 0.190, 0.132, 0.685, -0.100, 0.115, 0.220),
Kt = c(127, 77, 126, 116, 112, 112, 116, 184),
si = c(0, 0, 2, 9, 9, 7, 10, 19),
Ki = c(8, 0, 31, 87, 89, 67, 138, 9)
)
df_b <- data.frame()
for (i in 1:nrow(dadosB)) {
B_seg <- B(dadosB$Kb[i])
P_seg <- P(dadosB$Ap[i], dadosB$Kp[i])
Pq_seg <- Pq(dadosB$Kpq[i])
Q_seg <- Q(dadosB$Aq[i], dadosB$Kq[i])
R_seg <- R(dadosB$Ar[i], dadosB$Kr[i])
S_seg <- S(dadosB$As[i], dadosB$Ks[i], dadosB$Kcs[i])
St_seg <- St(S_seg, dadosB$Ks[i], dadosB$Kcs[i], dadosB$Kst[i], dadosB$sm[i])
T_seg <- T(dadosB$At[i], dadosB$Kt[i], St_seg, dadosB$Kst[i])
I_seg <- I(T_seg, dadosB$Kt[i], dadosB$si[i], dadosB$Ki[i])
pqrst <- c(B_seg, P_seg, Pq_seg, Q_seg, R_seg, S_seg, St_seg, T_seg, I_seg)
df_b <- rbind(df_b, data.frame(time = seq_along(pqrst), value = pqrst, condition = dadosB$m[i]))
}
# Equacao 1
B <- function(Kb){
rep(0, Kb)
}
# Equacao 2
P <- function(Ap, Kp){
k <- 0:Kp
P <- -(Ap / 2) * cos((2 * pi * k + 15) / (Kp))
}
# Equacao 3
Pq <- function(Kpq){
rep(0, Kpq)
}
# Equacao 4
Q <- function(Aq, Kq){
k <- 0:Kq
Q <- Aq * (k - 0.1*Kq + 0.1) * (19.78*pi/Kq) * exp(-2 * ((6*pi/Kq * (k - 0.1*Kq+0.1))^2))
Q <- ifelse(Q < 0, Q, NA)
return(Q[is.na(Q) == FALSE])
}
# Equacao 5
R <- function(Ar,Kr){
k <- 0:Kr
R <- Ar * sin((pi * k) / (Kr))
}
# Equacao 6
S <- function(As,Ks,Kcs){
k <- 0:(Ks-Kcs)
S <- -As * (0.1 * k * (19.78 * pi) / (Ks)) * exp(-2 * ((6 * pi/Ks * 0.1 * k)^2))
}
# Equacao 7
St <- function(S,Ks,Kcs,Kst,sm){
k <- 0:Kst
St <- - S * (Ks - Kcs) * (k / sm) + S * (Ks - Kcs)
}
# Equacao 8
T <- function(At, Kt, St, Kst){
k <- 0:Kt
T <- -At * cos((1.48 * pi * k + 15) / (Kt)) + At + St * (Kst)
}
# Equacao 9
I <- function(T, Kt, Si){
k <- 0:Kt
I <- T*Kt*(Si/(k+10))
}
library(ggplot2)
library(gridExtra)
# Criando a tabela em R
dadosB <- data.frame(
m = c("tachycardia", "ventricular tachycardia", "junctional tachycardia",
"atrioventricular block", "hyperkalemia", "hypokalemia",
"hypercalcemia", "hypocalcemia"),
Kb = c(10, 0, 117, 61, 121, 121, 117, 124),
Ap = c(0.070, 0.000, 0.090, 0.106, 0.070, 0.070, 0.100, -0.040),
Kp = c(93, 23, 79, 91, 73, 69, 79, 75),
Kpq = c(0, 0, 0, 48, 6, 13, 5, 0),
Aq = c(0.135, 0.325, 0.065, 0.040, 0.040, 0.020, 0.030, 0.000),
Kq = c(85, 140, 25, 21, 21, 22, 20, 15),
Ar = c(1.15, 1.09, 1.52, 1.55, 1.17, 1.00, 1.55, 1.37),
Kr = c(84, 133, 23, 23, 23, 15, 22, 36),
As = c(0.35, 0.28, 0.16, 0.13, 0.11, 0.75, 0.60, 0.16),
Ks = c(114, 182, 15, 15, 15, 26, 14, 54),
Kcs = c(61, 100, 5, 2, 4, -3, 5, 27),
sm = c(61, 119, 96, 17, 26, 35, 6, 87),
Kst = c(52, 57, 101, 52, 56, 64, 6, 42),
At = c(0.130, 0.000, 0.190, 0.132, 0.685, -0.100, 0.115, 0.220),
Kt = c(127, 77, 126, 116, 112, 112, 116, 184),
si = c(0, 0, 2, 9, 9, 7, 10, 19),
Ki = c(8, 0, 31, 87, 89, 67, 138, 9)
)
df_b <- data.frame()
for (i in 1:nrow(dadosB)) {
B_seg <- B(dadosB$Kb[i])
P_seg <- P(dadosB$Ap[i], dadosB$Kp[i])
Pq_seg <- Pq(dadosB$Kpq[i])
Q_seg <- Q(dadosB$Aq[i], dadosB$Kq[i])
R_seg <- R(dadosB$Ar[i], dadosB$Kr[i])
S_seg <- S(dadosB$As[i], dadosB$Ks[i], dadosB$Kcs[i])
St_seg <- St(S_seg, dadosB$Ks[i], dadosB$Kcs[i], dadosB$Kst[i], dadosB$sm[i])
T_seg <- T(dadosB$At[i], dadosB$Kt[i], St_seg, dadosB$Kst[i])
I_seg <- I(T_seg, dadosB$Kt[i], dadosB$si[i], dadosB$Ki[i])
pqrst <- c(B_seg, P_seg, Pq_seg, Q_seg, R_seg, S_seg, St_seg, T_seg, I_seg)
df_b <- rbind(df_b, data.frame(time = seq_along(pqrst), value = pqrst, condition = dadosB$m[i]))
}
library(ggplot2)
library(gridExtra)
# Criando a tabela em R
dadosB <- data.frame(
m = c("tachycardia", "ventricular tachycardia", "junctional tachycardia",
"atrioventricular block", "hyperkalemia", "hypokalemia",
"hypercalcemia", "hypocalcemia"),
Kb = c(10, 0, 117, 61, 121, 121, 117, 124),
Ap = c(0.070, 0.000, 0.090, 0.106, 0.070, 0.070, 0.100, -0.040),
Kp = c(93, 23, 79, 91, 73, 69, 79, 75),
Kpq = c(0, 0, 0, 48, 6, 13, 5, 0),
Aq = c(0.135, 0.325, 0.065, 0.040, 0.040, 0.020, 0.030, 0.000),
Kq = c(85, 140, 25, 21, 21, 22, 20, 15),
Ar = c(1.15, 1.09, 1.52, 1.55, 1.17, 1.00, 1.55, 1.37),
Kr = c(84, 133, 23, 23, 23, 15, 22, 36),
As = c(0.35, 0.28, 0.16, 0.13, 0.11, 0.75, 0.60, 0.16),
Ks = c(114, 182, 15, 15, 15, 26, 14, 54),
Kcs = c(61, 100, 5, 2, 4, -3, 5, 27),
sm = c(61, 119, 96, 17, 26, 35, 6, 87),
Kst = c(52, 57, 101, 52, 56, 64, 6, 42),
At = c(0.130, 0.000, 0.190, 0.132, 0.685, -0.100, 0.115, 0.220),
Kt = c(127, 77, 126, 116, 112, 112, 116, 184),
si = c(0, 0, 2, 9, 9, 7, 10, 19),
Ki = c(8, 0, 31, 87, 89, 67, 138, 9)
)
# Criando uma lista para armazenar os dados temporariamente
df_list <- list()
for (i in 1:nrow(dadosB)) {
B_seg <- B(dadosB$Kb[i])
P_seg <- P(dadosB$Ap[i], dadosB$Kp[i])
Pq_seg <- Pq(dadosB$Kpq[i])
Q_seg <- Q(dadosB$Aq[i], dadosB$Kq[i])
R_seg <- R(dadosB$Ar[i], dadosB$Kr[i])
S_seg <- S(dadosB$As[i], dadosB$Ks[i], dadosB$Kcs[i])
St_seg <- St(S_seg, dadosB$Ks[i], dadosB$Kcs[i], dadosB$Kst[i], dadosB$sm[i])
T_seg <- T(dadosB$At[i], dadosB$Kt[i], St_seg, dadosB$Kst[i])
# Ajustando a chamada da função I()
I_seg <- I(T_seg, dadosB$Kt[i], dadosB$si[i])
pqrst <- c(B_seg, P_seg, Pq_seg, Q_seg, R_seg, S_seg, St_seg, T_seg, I_seg)
df_list[[i]] <- data.frame(time = seq_along(pqrst), value = pqrst, condition = dadosB$m[i])
}
# Equacao 1
B <- function(Kb){
rep(0, Kb)
}
# Equacao 2
P <- function(Ap, Kp){
k <- 0:Kp
P <- -(Ap / 2) * cos((2 * pi * k + 15) / (Kp))
}
# Equacao 3
Pq <- function(Kpq){
rep(0, Kpq)
}
# Equacao 4
Q <- function(Aq, Kq){
k <- 0:Kq
Q <- Aq * (k - 0.1*Kq + 0.1) * (19.78*pi/Kq) * exp(-2 * ((6*pi/Kq * (k - 0.1*Kq+0.1))^2))
Q <- ifelse(Q < 0, Q, NA)
return(Q[is.na(Q) == FALSE])
}
# Equacao 5
R <- function(Ar,Kr){
k <- 0:Kr
R <- Ar * sin((pi * k) / (Kr))
}
# Equacao 6
S <- function(As,Ks,Kcs){
k <- 0:(Ks-Kcs)
S <- -As * (0.1 * k * (19.78 * pi) / (Ks)) * exp(-2 * ((6 * pi/Ks * 0.1 * k)^2))
}
# Equacao 7
St <- function(S,Ks,Kcs,Kst,sm){
k <- 0:Kst
St <- - S * (Ks - Kcs) * (k / sm) + S * (Ks - Kcs)
}
# Equacao 8
T <- function(At, Kt, St, Kst){
k <- 0:Kt
T <- -At * cos((1.48 * pi * k + 15) / (Kt)) + At + St * (Kst)
}
# Equacao 9
I <- function(T, Kt, Si){
k <- 0:Kt
I <- T*Kt*(Si/(k+10))
}
library(ggplot2)
library(gridExtra)
# Criando a tabela em R
dadosB <- data.frame(
m = c("tachycardia", "ventricular tachycardia", "junctional tachycardia",
"atrioventricular block", "hyperkalemia", "hypokalemia",
"hypercalcemia", "hypocalcemia"),
Kb = c(10, 0, 117, 61, 121, 121, 117, 124),
Ap = c(0.070, 0.000, 0.090, 0.106, 0.070, 0.070, 0.100, -0.040),
Kp = c(93, 23, 79, 91, 73, 69, 79, 75),
Kpq = c(0, 0, 0, 48, 6, 13, 5, 0),
Aq = c(0.135, 0.325, 0.065, 0.040, 0.040, 0.020, 0.030, 0.000),
Kq = c(85, 140, 25, 21, 21, 22, 20, 15),
Ar = c(1.15, 1.09, 1.52, 1.55, 1.17, 1.00, 1.55, 1.37),
Kr = c(84, 133, 23, 23, 23, 15, 22, 36),
As = c(0.35, 0.28, 0.16, 0.13, 0.11, 0.75, 0.60, 0.16),
Ks = c(114, 182, 15, 15, 15, 26, 14, 54),
Kcs = c(61, 100, 5, 2, 4, -3, 5, 27),
sm = c(61, 119, 96, 17, 26, 35, 6, 87),
Kst = c(52, 57, 101, 52, 56, 64, 6, 42),
At = c(0.130, 0.000, 0.190, 0.132, 0.685, -0.100, 0.115, 0.220),
Kt = c(127, 77, 126, 116, 112, 112, 116, 184),
si = c(0, 0, 2, 9, 9, 7, 10, 19),
Ki = c(8, 0, 31, 87, 89, 67, 138, 9)
)
# Criando uma lista para armazenar os dados temporariamente
df_list <- list()
for (i in 1:nrow(dadosB)) {
B_seg <- B(dadosB$Kb[i])
P_seg <- P(dadosB$Ap[i], dadosB$Kp[i])
Pq_seg <- Pq(dadosB$Kpq[i])
Q_seg <- Q(dadosB$Aq[i], dadosB$Kq[i])
R_seg <- R(dadosB$Ar[i], dadosB$Kr[i])
S_seg <- S(dadosB$As[i], dadosB$Ks[i], dadosB$Kcs[i])
St_seg <- St(S_seg, dadosB$Ks[i], dadosB$Kcs[i], dadosB$Kst[i], dadosB$sm[i])
T_seg <- T(dadosB$At[i], dadosB$Kt[i], St_seg, dadosB$Kst[i])
# Ajustando a chamada da função I()
I_seg <- I(T_seg, dadosB$Kt[i], dadosB$si[i])
pqrst <- c(B_seg, P_seg, Pq_seg, Q_seg, R_seg, S_seg, St_seg, T_seg, I_seg)
df_list[[i]] <- data.frame(time = seq_along(pqrst), value = pqrst, condition = dadosB$m[i])
}
# Convertendo lista para data.frame
df_b <- do.call(rbind, df_list)
# Criando o gráfico corrigido
ggplot(df_b, aes(x = time, y = value)) +
geom_line() +
facet_wrap(~condition, ncol = 2) +
labs(title = "Complexo PQRST para diferentes condições", x = "Tempo", y = "Amplitude") +
theme_minimal()
# Equacao 1
B <- function(Kb){
rep(0, Kb)
}
# Equacao 2
P <- function(Ap, Kp){
k <- 0:Kp
P <- -(Ap / 2) * cos((2 * pi * k + 15) / (Kp))
}
# Equacao 3
Pq <- function(Kpq){
rep(0, Kpq)
}
# Equacao 4
Q <- function(Aq, Kq){
k <- 0:Kq
Q <- Aq * (k - 0.1*Kq + 0.1) * (19.78*pi/Kq) * exp(-2 * ((6*pi/Kq * (k - 0.1*Kq+0.1))^2))
Q <- ifelse(Q < 0, Q, NA)
return(Q[is.na(Q) == FALSE])
}
# Equacao 5
R <- function(Ar,Kr){
k <- 0:Kr
R <- Ar * sin((pi * k) / (Kr))
}
# Equacao 6
S <- function(As,Ks,Kcs){
k <- 0:(Ks-Kcs)
S <- -As * (0.1 * k * (19.78 * pi) / (Ks)) * exp(-2 * ((6 * pi/Ks * 0.1 * k)^2))
}
# Equacao 7
St <- function(S,Ks,Kcs,Kst,sm){
k <- 0:Kst
St <- - S * (Ks - Kcs) * (k / sm) + S * (Ks - Kcs)
}
# Equacao 8
T <- function(At, Kt, St, Kst){
k <- 0:Kt
T <- -At * cos((1.48 * pi * k + 15) / (Kt)) + At + St * (Kst)
}
# Equacao 9
I <- function(T, Kt, Si, Ki){
k <- 0:Ki
I <- T*Kt*(Si/(k+10))
}
library(ggplot2)
library(gridExtra)
# Criando a tabela em R
dadosB <- data.frame(
m = c("tachycardia", "ventricular tachycardia", "junctional tachycardia",
"atrioventricular block", "hyperkalemia", "hypokalemia",
"hypercalcemia", "hypocalcemia"),
Kb = c(10, 0, 117, 61, 121, 121, 117, 124),
Ap = c(0.070, 0.000, 0.090, 0.106, 0.070, 0.070, 0.100, -0.040),
Kp = c(93, 23, 79, 91, 73, 69, 79, 75),
Kpq = c(0, 0, 0, 48, 6, 13, 5, 0),
Aq = c(0.135, 0.325, 0.065, 0.040, 0.040, 0.020, 0.030, 0.000),
Kq = c(85, 140, 25, 21, 21, 22, 20, 15),
Ar = c(1.15, 1.09, 1.52, 1.55, 1.17, 1.00, 1.55, 1.37),
Kr = c(84, 133, 23, 23, 23, 15, 22, 36),
As = c(0.35, 0.28, 0.16, 0.13, 0.11, 0.75, 0.60, 0.16),
Ks = c(114, 182, 15, 15, 15, 26, 14, 54),
Kcs = c(61, 100, 5, 2, 4, -3, 5, 27),
sm = c(61, 119, 96, 17, 26, 35, 6, 87),
Kst = c(52, 57, 101, 52, 56, 64, 6, 42),
At = c(0.130, 0.000, 0.190, 0.132, 0.685, -0.100, 0.115, 0.220),
Kt = c(127, 77, 126, 116, 112, 112, 116, 184),
si = c(0, 0, 2, 9, 9, 7, 10, 19),
Ki = c(8, 0, 31, 87, 89, 67, 138, 9)
)
# Criando uma lista para armazenar os dados temporariamente
df_list <- list()
for (i in 1:nrow(dadosB)) {
B_seg <- B(dadosB$Kb[i])
P_seg <- P(dadosB$Ap[i], dadosB$Kp[i])
Pq_seg <- Pq(dadosB$Kpq[i])
Q_seg <- Q(dadosB$Aq[i], dadosB$Kq[i])
R_seg <- R(dadosB$Ar[i], dadosB$Kr[i])
S_seg <- S(dadosB$As[i], dadosB$Ks[i], dadosB$Kcs[i])
St_seg <- St(S_seg, dadosB$Ks[i], dadosB$Kcs[i], dadosB$Kst[i], dadosB$sm[i])
T_seg <- T(dadosB$At[i], dadosB$Kt[i], St_seg, dadosB$Kst[i])
# Ajustando a chamada da função I()
I_seg <- I(T_seg, dadosB$Kt[i], dadosB$si[i], dadosB$Ki[i])
pqrst <- c(B_seg, P_seg, Pq_seg, Q_seg, R_seg, S_seg, St_seg, T_seg, I_seg)
df_list[[i]] <- data.frame(time = seq_along(pqrst), value = pqrst, condition = dadosB$m[i])
}
# Convertendo lista para data.frame
df_b <- do.call(rbind, df_list)
# Criando o gráfico corrigido
ggplot(df_b, aes(x = time, y = value)) +
geom_line() +
facet_wrap(~condition, ncol = 2) +
labs(title = "Complexo PQRST para diferentes condições", x = "Tempo", y = "Amplitude") +
theme_minimal()
library(ggplot2)
library(gridExtra)
# Criando a tabela em R
dadosB <- data.frame(
m = c("tachycardia", "ventricular tachycardia", "junctional tachycardia",
"atrioventricular block", "hyperkalemia", "hypokalemia",
"hypercalcemia", "hypocalcemia"),
Kb = c(10, 0, 117, 61, 121, 121, 117, 124),
Ap = c(0.070, 0.000, 0.090, 0.106, 0.070, 0.070, 0.100, -0.040),
Kp = c(93, 23, 79, 91, 73, 69, 79, 75),
Kpq = c(0, 0, 0, 48, 6, 13, 5, 0),
Aq = c(0.135, 0.325, 0.065, 0.040, 0.040, 0.020, 0.030, 0.000),
Kq = c(85, 140, 25, 21, 21, 22, 20, 15),
Ar = c(1.15, 1.09, 1.52, 1.55, 1.17, 1.00, 1.55, 1.37),
Kr = c(84, 133, 23, 23, 23, 15, 22, 36),
As = c(0.35, 0.28, 0.16, 0.13, 0.11, 0.75, 0.60, 0.16),
Ks = c(114, 182, 15, 15, 15, 26, 14, 54),
Kcs = c(61, 100, 5, 2, 4, -3, 5, 27),
sm = c(61, 119, 96, 17, 26, 35, 6, 87),
Kst = c(52, 57, 101, 52, 56, 64, 6, 42),
At = c(0.130, 0.000, 0.190, 0.132, 0.685, -0.100, 0.115, 0.220),
Kt = c(127, 77, 126, 116, 112, 112, 116, 184),
si = c(0, 0, 2, 9, 9, 7, 10, 19),
Ki = c(8, 0, 31, 87, 89, 67, 138, 9)
)
# Criando uma lista para armazenar os dados temporariamente
df_list <- list()
for (i in 1:nrow(dadosB)) {
B_seg <- B(dadosB$Kb[i])
P_seg <- P(dadosB$Ap[i], dadosB$Kp[i])
Pq_seg <- Pq(dadosB$Kpq[i])
Q_seg <- Q(dadosB$Aq[i], dadosB$Kq[i])
R_seg <- R(dadosB$Ar[i], dadosB$Kr[i])
S_seg <- S(dadosB$As[i], dadosB$Ks[i], dadosB$Kcs[i])
St_seg <- St(S_seg, dadosB$Ks[i], dadosB$Kcs[i], dadosB$Kst[i], dadosB$sm[i])
T_seg <- T(dadosB$At[i], dadosB$Kt[i], St_seg, dadosB$Kst[i])
# Ajustando a chamada da função I()
I_seg <- I(T_seg, dadosB$Kt[i], dadosB$si[i], dadosB$Ki[i])
pqrst <- c(B_seg, P_seg, Pq_seg, Q_seg, R_seg, S_seg, St_seg, T_seg, I_seg)
df_list[[i]] <- data.frame(time = seq_along(pqrst), value = pqrst, condition = dadosB$m[i])
}
# Convertendo lista para data.frame
df_b <- do.call(rbind, df_list)
# Criando o gráfico corrigido
ggplot(df_b, aes(x = time, y = value)) +
geom_line() +
facet_wrap(~condition, ncol = 2) +
labs(title = "Complexo PQRST para diferentes condições", x = "Tempo", y = "Amplitude") +
theme_minimal()
library(readxl)
library(signal)
library(ggplot2)
library(dplyr)
library(pracma)
library(zoo)
dados <- read_excel("CVM1.xlsx")
library(readxl)
library(signal)
library(ggplot2)
library(dplyr)
library(pracma)
library(zoo)
setwd("E:\GitHub\Biomecanica\Tarefa 5")
library(readxl)
library(signal)
library(ggplot2)
library(dplyr)
library(pracma)
library(zoo)
setwd("E:/GitHub/Biomecanica/Tarefa 5")
dados <- read_excel("CVM1 1.xlsx")
time <- dados$TIME
emg <- dados$EMG
fs <- 1 / mean(diff(time))
calc_rms_movel <- function(sinal, fs, window_length = 0.1, overlap = 0.5) {
window_samples <- round(window_length * fs)
overlap_samples <- round(window_samples * overlap)
starts <- seq(1, length(sinal) - window_samples, by = overlap_samples)
ends <- starts + window_samples - 1
rms_values <- sapply(1:length(starts), function(i) {
sqrt(mean(sinal[starts[i]:ends[i]]^2))
})
rms_time <- time[starts + floor(window_samples/2)]
return(data.frame(time = rms_time, rms = rms_values))
}
rms_result <- calc_rms_movel(emg, fs, window_length = 0.1, overlap = 0.5)
analyze_spectrum <- function(sinal, fs) {
n <- length(sinal)
fft_result <- fft(sinal)
freq <- (0:(n-1)) * (fs/n)
half <- floor(n/2)
fft_df <- data.frame(
frequency = freq[1:half],
magnitude = Mod(fft_result[1:half]) / n
)
fft_df$magnitude[2:half] <- 2 * fft_df$magnitude[2:half]
total_power <- sum(fft_df$magnitude)
cum_power <- cumsum(fft_df$magnitude)
mean_freq <- sum(fft_df$frequency * fft_df$magnitude) / total_power
median_freq <- fft_df$frequency[which.min(abs(cum_power - total_power/2))]
segment_length <- min(256, floor(length(sinal)/8))
psd <- pwelch_manual(sinal, fs, segment_length)
return(list(
fft = fft_df,
psd = psd,
mean_frequency = mean_freq,
median_frequency = median_freq
))
}
pwelch_manual <- function(sinal, fs, segment_length) {
n_segments <- floor(length(sinal)/segment_length)
psd <- rep(0, segment_length/2 + 1)
for(i in 1:n_segments) {
segment <- sinal[((i-1)*segment_length + 1):(i*segment_length)]
fft_seg <- fft(segment)
psd <- psd + Mod(fft_seg[1:(segment_length/2 + 1)])^2 / (fs * segment_length)
}
psd <- psd / n_segments
freq <- seq(0, fs/2, length.out = segment_length/2 + 1)
return(data.frame(frequency = freq, power = psd))
}
spectral_result <- analyze_spectrum(emg, fs)
calc_envelope <- function(sinal, fs, cutoff = 5) {
rectified <- abs(sinal)
bf <- butter(4, cutoff/(fs/2), type = "low")
envelope <- filtfilt(bf, rectified)
return(envelope)
}
emg_envelope <- calc_envelope(emg, fs, cutoff = 5)
par(mfrow = c(2, 2))
plot(time, emg, type = "l", col = "gray",
main = "Sinal EMG com RMS Móvel (100ms, 50% overlap)",
xlab = "Tempo (s)", ylab = "Amplitude")
lines(rms_result$time, rms_result$rms, col = "red", lwd = 2)
legend("topright", legend = c("EMG", "RMS Móvel"), col = c("gray", "pink"), lty = 1)
plot(spectral_result$fft$frequency, spectral_result$fft$magnitude, type = "l",
main = paste("Espectro de Frequência\nMF =", round(spectral_result$mean_frequency, 1),
"Hz, MDF =", round(spectral_result$median_frequency, 1), "Hz"),
xlab = "Frequência (Hz)", ylab = "Magnitude")
abline(v = spectral_result$mean_frequency, col = "blue", lty = 2)
abline(v = spectral_result$median_frequency, col = "green", lty = 2)
legend("topright", legend = c("Espectro", "Média", "Mediana"),
col = c("black", "blue", "green"), lty = c(1, 2, 2))
# Alterado para milivolts
plot(spectral_result$psd$frequency, spectral_result$psd$power * 1000, type = "l",
main = "Densidade Espectral de Potência (PSD) em mV²/Hz",
xlab = "Frequência (Hz)", ylab = "Potência (mV²/Hz)")
plot(time, emg, type = "l", col = "gray",
main = "Sinal EMG com Envoltório (filtro 5Hz)",
xlab = "Tempo (s)", ylab = "Amplitude")
lines(time, emg_envelope, col = "red", lwd = 2)
legend("topright", legend = c("EMG", "Envoltório"), col = c("gray", "red"), lty = 1)
resultados <- list(
time = time,
emg = emg,
rms_movel = rms_result,
spectral_analysis = spectral_result,
envelope = emg_envelope,
sampling_rate = fs,
parameters = list(
rms_window = "100ms com 50% overlap",
envelope_cutoff = "5Hz",
psd_method = "Welch's com segmentos de 256 pontos"
)
)
