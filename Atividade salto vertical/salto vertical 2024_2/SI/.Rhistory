library(dygraphs)
### CONFIGURAÇÕES DO JANELAMENTO ###
janela_ms <- 100       # Tamanho da janela em milissegundos
sobreposicao <- 0.5    # 50% de sobreposição
fs <- 1000             # Frequência de amostragem em Hz
### CÁLCULO DOS PARÂMETROS ###
amostras_por_janela <- round(janela_ms / 1000 * fs)  # 100 amostras
passo <- round(amostras_por_janela * (1 - sobreposicao))  # 50 amostras
### FUNÇÃO DE JANELAMENTO ###
realizar_janelamento <- function(sinal, tamanho_janela, passo) {
n <- length(sinal)
indices_inicio <- seq(1, n - tamanho_janela + 1, by = passo)
indices_fim <- indices_inicio + tamanho_janela - 1
# Garantir que não ultrapasse o comprimento do sinal
indices_fim <- pmin(indices_fim, n)
# Calcular médias para cada janela
medias <- sapply(seq_along(indices_inicio), function(i) {
mean(sinal[indices_inicio[i]:indices_fim[i]])
})
# Calcular tempo central de cada janela (em segundos)
tempos_centrais <- (indices_inicio + tamanho_janela/2) / fs
return(data.frame(
tempo = tempos_centrais,
media = medias
))
}
### APLICAÇÃO DO JANELAMENTO ###
resultados <- realizar_janelamento(sinal_completo, amostras_por_janela, passo)
### VISUALIZAÇÃO DOS RESULTADOS ###
dygraph(resultados, main = "Médias por Janela (100ms com 50% sobreposição)") %>%
dySeries("media", label = "Média da Janela") %>%
dyAxis("x", label = "Tempo (s)") %>%
dyAxis("y", label = "Amplitude Média") %>%
dyOptions(colors = "#2ca02c", strokeWidth = 1.5) %>%
dyHighlight(highlightCircleSize = 4,
highlightSeriesBackgroundAlpha = 0.3) %>%
dyRangeSelector(height = 30) %>%
# Adicionar linhas de referência para os segmentos originais
dyEvent(2, "Ruído→Serra", labelLoc = "bottom", color = "grey") %>%
dyEvent(7, "Serra→Senóide", labelLoc = "bottom", color = "grey") %>%
dyEvent(12, "Senóide→Rosa", labelLoc = "bottom", color = "grey") %>%
dyEvent(14, "Rosa→Potência", labelLoc = "bottom", color = "grey") %>%
dyEvent(16, "Potência→Quadrada", labelLoc = "bottom", color = "grey")
# Calcular diferenças entre médias consecutivas
diferencas <- diff(resultados$media)
# Identificar pontos onde a diferença é significativa
limiar_mudanca <- sd(diferencas) * 2
mudancas <- which(abs(diferencas) > limiar_mudanca)
library(dygraphs)
### CONFIGURAÇÕES DO JANELAMENTO ###
janela_ms <- 100       # Tamanho da janela em milissegundos
sobreposicao <- 0.5    # 50% de sobreposição
fs <- 1000             # Frequência de amostragem em Hz
### CÁLCULO DOS PARÂMETROS ###
amostras_por_janela <- round(janela_ms / 1000 * fs)  # 100 amostras
passo <- round(amostras_por_janela * (1 - sobreposicao))  # 50 amostras
### FUNÇÃO DE JANELAMENTO ###
realizar_janelamento <- function(sinal, tamanho_janela, passo) {
n <- length(sinal)
indices_inicio <- seq(1, n - tamanho_janela + 1, by = passo)
indices_fim <- indices_inicio + tamanho_janela - 1
# Garantir que não ultrapasse o comprimento do sinal
indices_fim <- pmin(indices_fim, n)
# Calcular médias para cada janela
medias <- sapply(seq_along(indices_inicio), function(i) {
mean(sinal[indices_inicio[i]:indices_fim[i]])
})
# Calcular tempo central de cada janela (em segundos)
tempos_centrais <- (indices_inicio + tamanho_janela/2) / fs
return(data.frame(
tempo = tempos_centrais,
media = medias
))
}
### APLICAÇÃO DO JANELAMENTO ###
resultados <- realizar_janelamento(sinal_completo, amostras_por_janela, passo)
### VISUALIZAÇÃO DOS RESULTADOS ###
dygraph(resultados, main = "Médias por Janela (100ms com 50% sobreposição)") %>%
dySeries("media", label = "Média da Janela") %>%
dyAxis("x", label = "Tempo (s)") %>%
dyAxis("y", label = "Amplitude Média") %>%
dyOptions(colors = "#2ca02c", strokeWidth = 1.5) %>%
dyHighlight(highlightCircleSize = 4,
highlightSeriesBackgroundAlpha = 0.3) %>%
dyRangeSelector(height = 30) %>%
# Adicionar linhas de referência para os segmentos originais
dyEvent(2, "Ruído p/ Serra", labelLoc = "bottom", color = "grey") %>%
dyEvent(7, "Serra p/ Senóide", labelLoc = "bottom", color = "grey") %>%
dyEvent(12, "Senóide p/ Rosa", labelLoc = "bottom", color = "grey") %>%
dyEvent(14, "Rosa p/ Potência", labelLoc = "bottom", color = "grey") %>%
dyEvent(16, "Potência p/ Quadrada", labelLoc = "bottom", color = "grey")
# Calcular diferenças entre médias consecutivas
diferencas <- diff(resultados$media)
# Identificar pontos onde a diferença é significativa
limiar_mudanca <- sd(diferencas) * 2
mudancas <- which(abs(diferencas) > limiar_mudanca)
library(dygraphs)
### CONFIGURAÇÕES DO JANELAMENTO ###
janela_ms <- 100       # Tamanho da janela em milissegundos
sobreposicao <- 0.5    # 50% de sobreposição
fs <- 1000             # Frequência de amostragem em Hz
### CÁLCULO DOS PARÂMETROS ###
amostras_por_janela <- round(janela_ms / 1000 * fs)  # 100 amostras
passo <- round(amostras_por_janela * (1 - sobreposicao))  # 50 amostras
### FUNÇÃO DE JANELAMENTO ###
realizar_janelamento <- function(sinal, tamanho_janela, passo) {
n <- length(sinal)
indices_inicio <- seq(1, n - tamanho_janela + 1, by = passo)
indices_fim <- indices_inicio + tamanho_janela - 1
# Garantir que não ultrapasse o comprimento do sinal
indices_fim <- pmin(indices_fim, n)
# Calcular médias para cada janela
medias <- sapply(seq_along(indices_inicio), function(i) {
mean(sinal[indices_inicio[i]:indices_fim[i]])
})
# Calcular tempo central de cada janela (em segundos)
tempos_centrais <- (indices_inicio + tamanho_janela/2) / fs
return(data.frame(
tempo = tempos_centrais,
media = medias
))
}
### APLICAÇÃO DO JANELAMENTO ###
resultados <- realizar_janelamento(sinal_completo, amostras_por_janela, passo)
### VISUALIZAÇÃO DOS RESULTADOS ###
dygraph(resultados, main = "Médias por Janela (100ms com 50% sobreposição)") %>%
dySeries("media", label = "Média da Janela") %>%
dyAxis("x", label = "Tempo (s)") %>%
dyAxis("y", label = "Amplitude Média") %>%
dyOptions(colors = "darkgreen", strokeWidth = 1.5) %>%
dyHighlight(highlightCircleSize = 4,
highlightSeriesBackgroundAlpha = 0.3) %>%
dyRangeSelector(height = 30) %>%
# Adicionar linhas de referência para os segmentos originais
dyEvent(2, "Ruído p/ Serra", labelLoc = "bottom", color = "grey") %>%
dyEvent(7, "Serra p/ Senóide", labelLoc = "bottom", color = "grey") %>%
dyEvent(12, "Senóide p/ Rosa", labelLoc = "bottom", color = "grey") %>%
dyEvent(14, "Rosa p/ Potência", labelLoc = "bottom", color = "grey") %>%
dyEvent(16, "Potência p/ Quadrada", labelLoc = "bottom", color = "grey")
# Calcular diferenças entre médias consecutivas
diferencas <- diff(resultados$media)
# Identificar pontos onde a diferença é significativa
limiar_mudanca <- sd(diferencas) * 2
mudancas <- which(abs(diferencas) > limiar_mudanca)
library(dygraphs)
### PREPARAÇÃO DOS DADOS ###
# 1. Recriar o sinal suavizado (médias móveis) com o mesmo comprimento do original
# Primeiro, criamos um vetor vazio com o mesmo tamanho do sinal original
sinal_suavizado <- numeric(length(sinal_completo))
# Preenchemos com as médias calculadas, replicando os valores para cada janela
for (i in seq_along(resultados$tempo)) {
inicio <- round((resultados$tempo[i] - janela_ms/2000) * fs)  # Calcula início da janela
fim <- round((resultados$tempo[i] + janela_ms/2000) * fs)     # Calcula fim da janela
fim <- min(fim, length(sinal_completo))                       # Ajusta para não ultrapassar
sinal_suavizado[inicio:fim] <- resultados$media[i]
}
# 2. Realizar a subtração (sinal original - sinal suavizado)
sinal_diferenca <- sinal_completo - sinal_suavizado
### VISUALIZAÇÃO DOS RESULTADOS ###
# Criar dataframe combinado para visualização
dados_comparacao <- data.frame(
tempo = tempo,
original = sinal_completo,
suavizado = sinal_suavizado,
diferenca = sinal_diferenca
)
# Gráfico comparativo
dygraph(dados_comparacao[, c("tempo", "original", "suavizado")],
main = "Comparação: Sinal Original vs Suavizado") %>%
dySeries("original", label = "Sinal Original") %>%
dySeries("suavizado", label = "Sinal Suavizado") %>%
dyAxis("x", label = "Tempo (s)") %>%
dyAxis("y", label = "Amplitude") %>%
dyOptions(colors = c("blue", "red")) %>%
dyRangeSelector(height = 30) %>%
dyHighlight(highlightCircleSize = 4)
# Gráfico da diferença
dygraph(dados_comparacao[, c("tempo", "diferenca")],
main = "Diferença: Sinal Original - Sinal Suavizado") %>%
dySeries("diferenca", label = "Diferença") %>%
dyAxis("x", label = "Tempo (s)") %>%
dyAxis("y", label = "Amplitude") %>%
dyOptions(colors = "purple") %>%
dyRangeSelector(height = 30) %>%
dyShading(from = 2, to = 7, color = "#FFEEEE") %>%
dyShading(from = 7, to = 12, color = "#EEFFEE") %>%
dyShading(from = 12, to = 14, color = "#EEEEFF") %>%
dyShading(from = 14, to = 16, color = "#FFEEFF") %>%
dyShading(from = 16, to = 21, color = "#FFFFEE")
# Gráfico da diferença
dygraph(dados_comparacao[, c("tempo", "diferenca")],
main = "Diferença: Sinal Original - Sinal Suavizado") %>%
dySeries("diferenca", label = "Diferença") %>%
dyAxis("x", label = "Tempo (s)") %>%
dyAxis("y", label = "Amplitude") %>%
dyOptions(colors = "purple") %>%
dyRangeSelector(height = 30) %>%
dyShading(from = 2, to = 7, color = "#FFEEEE") %>%
dyShading(from = 7, to = 12, color = "#EEFFEE") %>%
dyShading(from = 12, to = 14, color = "#EEEEFF") %>%
dyShading(from = 14, to = 16, color = "#FFEEFF") %>%
dyShading(from = 16, to = 21, color = "#FFFFEE")
library(ggplot2)
library(dplyr)
library(tidyr)
# Preparação dos dados para o ggplot
dados_plot <- data.frame(
tempo = rep(tempo, 3),
valor = c(sinal_completo, sinal_suavizado, sinal_diferenca),
tipo = factor(rep(c("Original", "Janelado", "Diferença"),
each = length(tempo)),
levels = c("Original", "Janelado", "Diferença"))
)
# Adicionando informações de segmento para destacar no gráfico
dados_plot$segmento <- case_when(
tempo < 2 ~ "Ruído Branco",
tempo >= 2 & tempo < 7 ~ "Dente de Serra",
tempo >= 7 & tempo < 12 ~ "Senoidal",
tempo >= 12 & tempo < 14 ~ "Ruído Rosa",
tempo >= 14 & tempo < 16 ~ "Ruído Potência",
TRUE ~ "Onda Quadrada"
)
# Criando o gráfico com facet_wrap
ggplot(dados_plot, aes(x = tempo, y = valor)) +
geom_line(aes(color = segmento), linewidth = 0.5) +
facet_wrap(~ tipo, ncol = 1, scales = "free_y") +
scale_color_brewer(palette = "Set1") +
labs(title = "Comparação dos Sinais: Original, Janelado e Diferença",
x = "Tempo (s)",
y = "Amplitude",
color = "Segmento") +
theme_minimal() +
theme(
legend.position = "bottom",
strip.text = element_text(size = 12, face = "bold"),
panel.spacing = unit(1, "lines")
) +
# Adicionar linhas verticais para as transições
geom_vline(xintercept = c(2, 7, 12, 14, 16),
linetype = "dashed", color = "gray50", alpha = 0.7) +
# Adicionar rótulos para as transições
annotate("text", x = c(1, 4.5, 9.5, 13, 15, 18.5), y = Inf,
label = c("Ruído", "Serra", "Senóide", "Rosa", "Potência", "Quadrada"),
vjust = 2, hjust = 0.5, size = 3, color = "gray30")
library(ggplot2)
library(dplyr)
library(tidyr)
# Preparação dos dados para o ggplot
dados_plot <- data.frame(
tempo = rep(tempo, 3),
valor = c(sinal_completo, sinal_suavizado, sinal_diferenca),
tipo = factor(rep(c("Original", "Janelado", "Diferenca"),
each = length(tempo)),
levels = c("Original", "Janelado", "Diferenca"))
)
# Adicionando informações de segmento para destacar no gráfico
dados_plot$segmento <- case_when(
tempo < 2 ~ "Ruído Branco",
tempo >= 2 & tempo < 7 ~ "Dente de Serra",
tempo >= 7 & tempo < 12 ~ "Senoidal",
tempo >= 12 & tempo < 14 ~ "Ruído Rosa",
tempo >= 14 & tempo < 16 ~ "Ruído Potencia",
TRUE ~ "Onda Quadrada"
)
# Criando o gráfico com facet_wrap
ggplot(dados_plot, aes(x = tempo, y = valor)) +
geom_line(aes(color = segmento), linewidth = 0.5) +
facet_wrap(~ tipo, ncol = 1, scales = "free_y") +
scale_color_brewer(palette = "Set1") +
labs(title = "Comparacao dos Sinais: Original, Janelado e Diferença",
x = "Tempo (s)",
y = "Amplitude",
color = "Segmento") +
theme_minimal() +
theme(
legend.position = "bottom",
strip.text = element_text(size = 12, face = "bold"),
panel.spacing = unit(1, "lines")
) +
# Adicionar linhas verticais para as transições
geom_vline(xintercept = c(2, 7, 12, 14, 16),
linetype = "dashed", color = "gray50", alpha = 0.7) +
# Adicionar rótulos para as transições
annotate("text", x = c(1, 4.5, 9.5, 13, 15, 18.5), y = Inf,
label = c("Ruído", "Serra", "Senóide", "Rosa", "Potência", "Quadrada"),
vjust = 2, hjust = 0.5, size = 3, color = "gray30")
library(ggplot2)
library(reshape2)
install.packages("reshape2")
setwd("C:\Users\heito\Documents\GitHub\Biomecanica")
# Carregar os pacotes necessários
library(ggplot2)
library(reshape2)
setwd("C:/Users/heito/Documents/GitHub/Biomecanica")
# Função para calcular o impulso usando a regra do trapézio
calc_impulse <- function(time, force) {
impulse <- sum(diff(time) * (head(force, -1) + tail(force, -1)) / 2)
return(impulse)
}
# Vetores com os nomes dos arquivos (assumindo que os arquivos estão no diretório de trabalho)
ci_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
# Carregar os pacotes necessários
library(ggplot2)
library(reshape2)
setwd("C:/Users/heito/Documents/GitHub/Biomecanica")
# Função para calcular o impulso usando a regra do trapézio
calc_impulse <- function(time, force) {
impulse <- sum(diff(time) * (head(force, -1) + tail(force, -1)) / 2)
return(impulse)
}
# Vetores com os nomes dos arquivos (assumindo que os arquivos estão no diretório de trabalho)
ci_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
si_files <- c("Eduardo SI.txt", "Heitor SI.txt", "Heloisa SI.txt", "João SI.txt",
"Luiza SI.txt", "Marcos SI.txt", "Ivan SI.txt", "Lucas SI.txt",
"Nivea SI.txt", "Anna SI.txt")
# Função para extrair o nome do participante a partir do nome do arquivo
extract_name <- function(filename, condition) {
# Remove o sufixo " CI.txt" ou " SI.txt" para deixar apenas o nome do participante
name <- sub(paste0(" ", condition, "\\.txt$"), "", filename)
return(name)
}
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
# Função para extrair o nome do participante a partir do nome do arquivo
extract_name <- function(filename, condition) {
# Remove o sufixo " CI.txt" ou " SI.txt" para deixar apenas o nome do participante
name <- sub(paste0(" ", condition, "\\.txt$"), "", filename)
return(name)
}
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/CI")
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/CI")
# Carregar os pacotes necessários
library(ggplot2)
library(reshape2)
# Função para calcular o impulso usando a regra do trapézio
calc_impulse <- function(time, force) {
impulse <- sum(diff(time) * (head(force, -1) + tail(force, -1)) / 2)
return(impulse)
}
# Vetores com os nomes dos arquivos (assumindo que os arquivos estão no diretório de trabalho)
ci_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
si_files <- c("Eduardo SI.txt", "Heitor SI.txt", "Heloisa SI.txt", "João SI.txt",
"Luiza SI.txt", "Marcos SI.txt", "Ivan SI.txt", "Lucas SI.txt",
"Nivea SI.txt", "Anna SI.txt")
# Função para extrair o nome do participante a partir do nome do arquivo
extract_name <- function(filename, condition) {
# Remove o sufixo " CI.txt" ou " SI.txt" para deixar apenas o nome do participante
name <- sub(paste0(" ", condition, "\\.txt$"), "", filename)
return(name)
}
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/CI")
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
# Carregar os pacotes necessários
library(ggplot2)
library(reshape2)
# Função para calcular o impulso usando a regra do trapézio
calc_impulse <- function(time, force) {
impulse <- sum(diff(time) * (head(force, -1) + tail(force, -1)) / 2)
return(impulse)
}
# Vetores com os nomes dos arquivos (assumindo que os arquivos estão no diretório de trabalho)
ci_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
si_files <- c("Eduardo SI.txt", "Heitor SI.txt", "Heloisa SI.txt", "João SI.txt",
"Luiza SI.txt", "Marcos SI.txt", "Ivan SI.txt", "Lucas SI.txt",
"Nivea SI.txt", "Anna SI.txt")
# Função para extrair o nome do participante a partir do nome do arquivo
extract_name <- function(filename, condition) {
# Remove o sufixo " CI.txt" ou " SI.txt" para deixar apenas o nome do participante
name <- sub(paste0(" ", condition, "\\.txt$"), "", filename)
return(name)
}
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/CI")
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI"
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI"
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
# Carregar os pacotes necessários
library(ggplot2)
library(reshape2)
# Função para calcular o impulso usando a regra do trapézio
calc_impulse <- function(time, force) {
impulse <- sum(diff(time) * (head(force, -1) + tail(force, -1)) / 2)
return(impulse)
}
# Vetores com os nomes dos arquivos (assumindo que os arquivos estão no diretório de trabalho)
ci_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
si_files <- c("Eduardo SI.txt", "Heitor SI.txt", "Heloisa SI.txt", "João SI.txt",
"Luiza SI.txt", "Marcos SI.txt", "Ivan SI.txt", "Lucas SI.txt",
"Nivea SI.txt", "Anna SI.txt")
# Função para extrair o nome do participante a partir do nome do arquivo
extract_name <- function(filename, condition) {
# Remove o sufixo " CI.txt" ou " SI.txt" para deixar apenas o nome do participante
name <- sub(paste0(" ", condition, "\\.txt$"), "", filename)
return(name)
}
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/CI")
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI"
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
# Vetores com os nomes dos arquivos (assumindo que os arquivos estão no diretório de trabalho)
ci_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
si_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
# Função para extrair o nome do participante a partir do nome do arquivo
extract_name <- function(filename, condition) {
# Remove o sufixo " CI.txt" ou " SI.txt" para deixar apenas o nome do participante
name <- sub(paste0(" ", condition, "\\.txt$"), "", filename)
return(name)
}
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/CI")
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI"
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI")
# Carregar os pacotes necessários
library(ggplot2)
library(reshape2)
# Função para calcular o impulso usando a regra do trapézio
calc_impulse <- function(time, force) {
impulse <- sum(diff(time) * (head(force, -1) + tail(force, -1)) / 2)
return(impulse)
}
# Vetores com os nomes dos arquivos (assumindo que os arquivos estão no diretório de trabalho)
ci_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
si_files <- c("Luiza CI.txt", "Anna CI.txt", "Heitor CI.txt", "João CI.txt",
"Marcos CI.txt", "Eduardo CI.txt", "Ivan CI.txt", "Lucas CI.txt",
"Nivea CI.txt", "Heloisa CI.txt")
# Função para extrair o nome do participante a partir do nome do arquivo
extract_name <- function(filename, condition) {
# Remove o sufixo " CI.txt" ou " SI.txt"
name <- sub(paste0(" ", condition, "\\.txt$"), "", filename)
return(name)
}
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/CI")
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI")
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/CI")
# Calcular o impulso para cada arquivo da condição CI
impulse_CI <- sapply(ci_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI")
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
setwd("C:/Users/heito/Documents/GitHub/Biomecanica/Atividade salto vertical/salto vertical 2024_2/SI")
# Calcular o impulso para cada arquivo da condição SI
impulse_SI <- sapply(si_files, function(file) {
data <- read.delim(file, header = TRUE, sep = "\t")
calc_impulse(data$Time, data$Fz)
})
